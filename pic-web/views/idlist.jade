extends simplelayout
doctype html
block content

    html(lang='zh-CN')
        head
            meta(charset='utf-8')
            link(rel='icon', href='https://static.jianshukeji.com/highcharts/images/favicon.ico')
            meta(name="viewport" content="width=device-width, initial-scale=1")

    script(src='/javascripts/highcharts.js')

    script(src='/javascripts/highcharts-more.js')
    script(src='/javascripts/xrange.js')
    script(src='/javascripts/exporting.js')
    script(src='/javascripts/series-label.js')

    link(rel='shortcut icon', href='http://static.tmimgcdn.com/img/favicon.ico')
    link(rel='icon', href='http://static.tmimgcdn.com/img/favicon.ico')
    link(rel='stylesheet', type='text/css', media='all', href='/stylesheets/bootstrap.min.css')


    link(rel='stylesheet', type='text/css', media='all', href='/stylesheets/bootstrap-glyphicons.css')
    link(rel='stylesheet', type='text/css', media='all', href='/stylesheets/styles.css')
    script(src='/javascripts/jquery-1.11.0.min.js')

    script(src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js")
    link(href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis-timeline-graph2d.min.css" rel="stylesheet" type="text/css")
    link(rel='stylesheet', type='text/css', media='all', href='/stylesheets/vis_timeline.css')


    body

    div(style="width: 1000px; margin: 50px 200px;")
        ul(id="header")

    div(style="margin: 50px 200px;" id="chartdiv"  )
    div(style='min-width: 300px;max-width: 1500px;margin: 1em auto;', id="labchart"  )
    div(style='min-width: 300px;max-width: 1500px;margin: 1em auto;' , id="timechart3")
    div(style='min-width: 300px;max-width: 1500px;margin: 1em auto;' , id="timechart4")
    div(style='min-width: 300px;max-width: 1500px;margin: 1em auto;' , id="timechart1" )
    div(style='min-width: 300px;max-width: 1500px;margin: 1em auto;' , id="timechart2")


    script(type='text/javascript').

        function redirect_sign(a) {
            window.open("/search/graph_sign?q=" + a);
        }
        function redirect_lab(a) {
            window.open("/search/graph_lab?q=" + a);
        }
        function redirect_event(a) {
            window.open("/search/graph_event?q=" + a);
        }


        function search_id() {
            var Term = !{JSON.stringify(term)};
            $.ajax({
                url: "/search/id/list",
                type: "POST",
                data: {term: Term},

                success: function (data) {

                    if (data == '') {
                        alert("No corresponding data!");
                    } else {
                        {
                            var html = "<li><div>";
                            html += "<p><span style='color:#14334b;font-size:20px'><strong>Subject ID: </strong>" + data[0].SUBJECT_ID + "</span></p>";
                            html += "<p><span style='color:#14334b;font-size:15px'><strong>Gender: </strong>" + data[0].GENDER + "</span></p>";
                            html += "<p><span style='color:#14334b;font-size:15px'><strong>Date of Born: </strong>" + data[0].DOB + "</span></p>";
                            if (data[0].EXPIRE_FLAG == "1")
                                html += "<p><span style='color:#14334b;font-size:15px'><strong>Confirmed Dead In Hospital: </strong>"+data[0].DOD+"</span></p>";
                            else
                                html += "<p><span style='color:#14334b;font-size:15px'><strong><I>Not Confirmed Dead In Hospital</I></strong></span></p>";
                            html += "</div></li>";

                        }
                        $("#header").append($(html));
                        search_graph_event();

                    }
                }
            })
        }

        function search_graph_event() {
            var Term = !{JSON.stringify(term)};
            $.ajax({
                url: "/search/id/event",
                type: "POST",
                data: {term: Term},

                success: function (data) {
                    if (data[0] == '') {
                    } else {

                        if (typeof data[0][0].MONITOR_TIME == "undefined") {
                            var data0 = data[0]
                            var data1 = data[1]
                        } else {
                            data1 = data[0]
                            data0 = data[1]
                        }



                        var admitFlag = 0;
                        var diachargeFlag = 0;
                        var surgeryFlag = 0
                        var transferFlag = 0;
                        var dataset = [];
                        var transfer = [{
                            HADM_ID: data0[0].HADM_ID,
                            ICUSTAY_ID: data0[0].ICUSTAY_ID,
                            EVENTTYPE: 'transfer',
                            CURR_CAREUNIT: data0[0].LAST_CAREUNIT,
                            CURR_WARDID: data0[0].LAST_WARDID,
                            INTIME: data0[0].INTIME,
                            OUTTIME: data0[0].OUTTIME
                        }];
                        transfer.push({
                            HADM_ID: data0[0].HADM_ID,
                            ICUSTAY_ID: data0[0].ICUSTAY_ID,
                            EVENTTYPE: 'admit',
                            CURR_CAREUNIT: data0[0].ADMISSION_LOCATION,
                            CURR_WARDID: null,
                            INTIME: data0[0].ADMITTIME,
                            OUTTIME: null
                        });
                        transfer.push({
                            HADM_ID: data0[0].HADM_ID,
                            ICUSTAY_ID: data0[0].ICUSTAY_ID,
                            EVENTTYPE: 'discharge',
                            CURR_CAREUNIT: data0[0].DISCHARGE_LOCATION,
                            CURR_WARDID: null,
                            INTIME: null,
                            OUTTIME: data0[0].DISCHTIME
                        });
                        var admit = [];
                        var discharge = [];
                        var icu = [];
                        var icustay = [];


                        for (var s = 0; s < data0.length; s++) {
                            var arr1 = {
                                HADM_ID: data0[s].HADM_ID,
                                ICUSTAY_ID: data0[s].ICUSTAY_ID,
                                EVENTTYPE: 'transfer',
                                CURR_CAREUNIT: data0[s].LAST_CAREUNIT,
                                CURR_WARDID: data0[s].LAST_WARDID,
                                INTIME: data0[s].INTIME,
                                OUTTIME: data0[s].OUTTIME
                            }
                            var arr2 = {
                                HADM_ID: data0[s].HADM_ID,
                                ICUSTAY_ID: data0[s].ICUSTAY_ID,
                                EVENTTYPE: 'admit',
                                CURR_CAREUNIT: data0[s].ADMISSION_LOCATION,
                                CURR_WARDID: null,
                                INTIME: data0[s].ADMITTIME,
                                OUTTIME: null
                            }
                            var arr3 = {
                                HADM_ID: data0[s].HADM_ID,
                                ICUSTAY_ID: data0[s].ICUSTAY_ID,
                                EVENTTYPE: 'discharge',
                                CURR_CAREUNIT: data0[s].DISCHARGE_LOCATION,
                                CURR_WARDID: null,
                                INTIME: null,
                                OUTTIME: data0[s].DISCHTIME
                            }


                            for (var r = 0; r < transfer.length; r++) {
                                if (isObjEqual(arr1, transfer[r])) transferFlag = 1;
                            }

                            if (transferFlag == 0) transfer.push(arr1);
                            transferFlag = 0;

                            for (var r = 0; r < transfer.length; r++) { 
                                if (arr2.HADM_ID == transfer[r].HADM_ID && arr2.EVENTTYPE == transfer[r].EVENTTYPE && arr2.CURR_CAREUNIT == transfer[r].CURR_CAREUNIT && arr2.CURR_WARDID == transfer[r].CURR_WARDID && arr2.INTIME == transfer[r].INTIME && arr2.OUTTIME == transfer[r].OUTTIME) transferFlag = 1;
                            }
                            if (transferFlag == 0) transfer.push(arr2);
                            transferFlag = 0;

                            for (var r = 0; r < transfer.length; r++) {
                                if (arr3.HADM_ID == transfer[r].HADM_ID && arr3.EVENTTYPE == transfer[r].EVENTTYPE && arr3.CURR_CAREUNIT == transfer[r].CURR_CAREUNIT && arr3.CURR_WARDID == transfer[r].CURR_WARDID && arr3.INTIME == transfer[r].INTIME && arr3.OUTTIME == transfer[r].OUTTIME) transferFlag = 1;
                            }
                            if (transferFlag == 0) transfer.push(arr3);
                            transferFlag = 0;
                        }

                        if (data1 != '') {
                            var surgery = [{
                                HADM_ID: data1[0].HADM_ID,
                                MONITOR_TIME: data1[0].MONITOR_TIME,
                                OPER_ID: data1[0].OPER_ID
                            }];

                            for (var p = 0; p < data1.length; p++) {  
                                for (var q = 0; q < surgery.length; q++) {
                                    if (data1[p].HADM_ID == surgery[q].HADM_ID && data1[p].MONITOR_TIME == surgery[q].MONITOR_TIME && data1[p].OPER_ID == surgery[q].OPER_ID) surgeryFlag = 1;
                                }
                                if (surgeryFlag == 0) surgery.push({
                                    HADM_ID: data1[p].HADM_ID,
                                    MONITOR_TIME: data1[p].MONITOR_TIME,
                                    OPER_ID: data1[p].OPER_ID
                                });
                                surgeryFlag = 0;
                            }

                            var hadmid = [data1[0].HADM_ID]
                            var operid = [data1[0].OPER_ID];
                            var surgery_s = [data1[0].MONITOR_TIME];
                            var surgery_e = [];

                            for (var s = 0; s < surgery.length; s++) {
                                if (in_array(surgery[s].OPER_ID, operid) == -1) {
                                    hadmid.push(surgery[s].HADM_ID)
                                    operid.push(surgery[s].OPER_ID);
                                    surgery_s.push(surgery[s].MONITOR_TIME);
                                    surgery_e.push(surgery[s - 1].MONITOR_TIME);
                                } else {
                                    continue;
                                }
                            }
                            surgery_e.push(surgery[surgery.length - 1].MONITOR_TIME);

                            for (var s = 0; s < operid.length; s++) {
                                dataset.push({
                                    start: new Date(Number(chGMT(surgery_s[s]).slice(0, 4)), Number(chGMT(surgery_s[s]).slice(5, 7) - 1), Number(chGMT(surgery_s[s]).slice(8, 10)), Number(chGMT(surgery_s[s]).slice(11, 13)), Number(chGMT(surgery_s[s]).slice(14, 16)), Number(chGMT(surgery_s[s]).slice(17, 19))),
                                    content: 'Operation_id=' + operid[s] + '<br><button onclick="search_graph_surgeryvital(' + hadmid[s] + ',' + operid[s] + ')">surgery vitals</button>',
                                    title: 'Duration: From' + Number(chGMT(surgery_s[s]).slice(0, 4)) + '.' + Number(chGMT(surgery_s[s]).slice(5, 7)) + '.' + Number(chGMT(surgery_s[s]).slice(8, 10)) + ' ' + chGMT(surgery_s[s]).slice(11, 13) + ':' + chGMT(surgery_s[s]).slice(14, 16) + ':' + chGMT(surgery_s[s]).slice(17, 19) + ' To ' + Number(chGMT(surgery_e[s]).slice(0, 4)) + '.' + Number(chGMT(surgery_e[s]).slice(5, 7)) + '.' + Number(chGMT(surgery_e[s]).slice(8, 10)) + ' ' + chGMT(surgery_e[s]).slice(11, 13) + ':' + chGMT(surgery_e[s]).slice(14, 16) + ':' + chGMT(surgery_e[s]).slice(17, 19),
                                    className: 'lightgreen',
                                    group: 2
                                });

                            }

                            var groups = new vis.DataSet([
                                {id: 0, content: 'Admission<br>&Discharge', value: 4},
                                {id: 1, content: 'Transfers', value: 3},
                                {id: 2, content: 'Surgery', value: 2},
                                {id: 3, content: 'ICUSTAY<br>' + 'ID', value: 1},
                                {id: 4, content: 'HADM<br>' + 'ID', value: 0}

                            ]);
                        }

                        else{
                            var groups = new vis.DataSet([
                                {id: 0, content: 'Admission<br>&Discharge', value: 4},
                                {id: 1, content: 'Transfers', value: 3},
                                {id: 3, content: 'ICUSTAY<br>' + 'ID', value: 1},
                                {id: 4, content: 'HADM<br>' + 'ID', value: 0}

                            ]);

                        }



                        for (var t = 0; t < transfer.length; t++) {

                            if (transfer[t].ICUSTAY_ID != null) {
                                icu.push({
                                    INTIME: transfer[t].INTIME,
                                    OUTTIME: transfer[t].OUTTIME,
                                    ICUSTAY_ID: transfer[t].ICUSTAY_ID

                                })
                            }


                            if (transfer[t].EVENTTYPE == 'admit' || transfer[t].EVENTTYPE == 'discharge') {


                                if (transfer[t].EVENTTYPE == 'admit') {
                                    admit.push({
                                        HADM_ID: transfer[t].HADM_ID,
                                        EVENTTYPE: transfer[t].EVENTTYPE,
                                        INTIME: transfer[t].INTIME
                                    })
                                }
                                if (transfer[t].EVENTTYPE == 'discharge') {
                                    discharge.push({
                                        HADM_ID: transfer[t].HADM_ID,
                                        EVENTTYPE: transfer[t].EVENTTYPE,
                                        OUTTIME: transfer[t].OUTTIME
                                    })
                                }

                                if (transfer[t].EVENTTYPE == 'transfer') {
                                    dataset.push({
                                        start: new Date(Number(chGMT(transfer[t].INTIME).slice(0, 4)), Number(chGMT(transfer[t].INTIME).slice(5, 7) - 1), Number(chGMT(transfer[t].INTIME).slice(8, 10)), Number(chGMT(transfer[t].INTIME).slice(11, 13)), Number(chGMT(transfer[t].INTIME).slice(14, 16)), Number(chGMT(transfer[t].INTIME).slice(17, 19))),
                                        content: transfer[t].EVENTTYPE + '<br>to Unit ' + transfer[t].CURR_CAREUNIT + ' Ward ' + transfer[t].CURR_WARDID,
                                        title: 'Time:' + Number(chGMT(transfer[t].INTIME).slice(0, 4)) + '.' + Number(chGMT(transfer[t].INTIME).slice(5, 7)) + '.' + Number(chGMT(transfer[t].INTIME).slice(8, 10)) + ' ' + chGMT(transfer[t].INTIME).slice(11, 13) + ':' + chGMT(transfer[t].INTIME).slice(14, 16) + ':' + chGMT(transfer[t].INTIME).slice(17, 19),
                                        className: 'red',
                                        group: 0
                                    });
                                }

                                if (transfer[t].EVENTTYPE == 'admit') {
                                    dataset.push({
                                        start: new Date(Number(chGMT(transfer[t].INTIME).slice(0, 4)), Number(chGMT(transfer[t].INTIME).slice(5, 7) - 1), Number(chGMT(transfer[t].INTIME).slice(8, 10)), Number(chGMT(transfer[t].INTIME).slice(11, 13)), Number(chGMT(transfer[t].INTIME).slice(14, 16)), Number(chGMT(transfer[t].INTIME).slice(17, 19))),
                                        content: transfer[t].EVENTTYPE + '<br>in Unit ' + transfer[t].CURR_CAREUNIT,
                                        title: 'Time:' + Number(chGMT(transfer[t].INTIME).slice(0, 4)) + '.' + Number(chGMT(transfer[t].INTIME).slice(5, 7)) + '.' + Number(chGMT(transfer[t].INTIME).slice(8, 10)) + ' ' + chGMT(transfer[t].INTIME).slice(11, 13) + ':' + chGMT(transfer[t].INTIME).slice(14, 16) + ':' + chGMT(transfer[t].INTIME).slice(17, 19),
                                        className: 'red',
                                        group: 0
                                    });
                                }
                                if (transfer[t].EVENTTYPE == 'discharge') {
                                    if ((transfer[t].OUTTIME) != null) { 
                                        dataset.push({
                                            start: new Date(Number(chGMT(transfer[t].OUTTIME).slice(0, 4)), Number(chGMT(transfer[t].OUTTIME).slice(5, 7) - 1), Number(chGMT(transfer[t].OUTTIME).slice(8, 10)), Number(chGMT(transfer[t].OUTTIME).slice(11, 13)), Number(chGMT(transfer[t].OUTTIME).slice(14, 16)), Number(chGMT(transfer[t].OUTTIME).slice(17, 19))),
                                            content: transfer[t].EVENTTYPE + '<br>from Unit ' + transfer[t].CURR_CAREUNIT,
                                            title: 'Time:' + Number(chGMT(transfer[t].OUTTIME).slice(0, 4)) + '.' + Number(chGMT(transfer[t].OUTTIME).slice(5, 7)) + '.' + Number(chGMT(transfer[t].OUTTIME).slice(8, 10)) + ' ' + chGMT(transfer[t].OUTTIME).slice(11, 13) + ':' + chGMT(transfer[t].OUTTIME).slice(14, 16) + ':' + chGMT(transfer[t].OUTTIME).slice(17, 19),
                                            className: 'red',
                                            group: 0
                                        });
                                    }

                                }

                            } else {
                                if (transfer[t].CURR_CAREUNIT != null && transfer[t].CURR_WARDID != null) {
                                    dataset.push({
                                        start: new Date(Number(chGMT(transfer[t].INTIME).slice(0, 4)), Number(chGMT(transfer[t].INTIME).slice(5, 7) - 1), Number(chGMT(transfer[t].INTIME).slice(8, 10)), Number(chGMT(transfer[t].INTIME).slice(11, 13)), Number(chGMT(transfer[t].INTIME).slice(14, 16)), Number(chGMT(transfer[t].INTIME).slice(17, 19))),
                                        content: 'Transfer to Unit ' + transfer[t].CURR_CAREUNIT + ' Ward ' + transfer[t].CURR_WARDID,
                                        title: 'Time:' + Number(chGMT(transfer[t].INTIME).slice(0, 4)) + '.' + Number(chGMT(transfer[t].INTIME).slice(5, 7)) + '.' + Number(chGMT(transfer[t].INTIME).slice(8, 10)) + ' ' + chGMT(transfer[t].INTIME).slice(11, 13) + ':' + chGMT(transfer[t].INTIME).slice(14, 16) + ':' + chGMT(transfer[t].INTIME).slice(17, 19),
                                        group: 1
                                    });
                                } else if (transfer[t].CURR_CAREUNIT == null && transfer[t].CURR_WARDID != null) {
                                    dataset.push({
                                        start: new Date(Number(chGMT(transfer[t].INTIME).slice(0, 4)), Number(chGMT(transfer[t].INTIME).slice(5, 7) - 1), Number(chGMT(transfer[t].INTIME).slice(8, 10)), Number(chGMT(transfer[t].INTIME).slice(11, 13)), Number(chGMT(transfer[t].INTIME).slice(14, 16)), Number(chGMT(transfer[t].INTIME).slice(17, 19))),
                                        content: 'Transfer to Ward ' + transfer[t].CURR_WARDID,
                                        title: 'Time:' + Number(chGMT(transfer[t].INTIME).slice(0, 4)) + '.' + Number(chGMT(transfer[t].INTIME).slice(5, 7)) + '.' + Number(chGMT(transfer[t].INTIME).slice(8, 10)) + ' ' + chGMT(transfer[t].INTIME).slice(11, 13) + ':' + chGMT(transfer[t].INTIME).slice(14, 16) + ':' + chGMT(transfer[t].INTIME).slice(17, 19),
                                        group: 1
                                    });
                                } else if (transfer[t].CURR_CAREUNIT != null && transfer[t].CURR_WARDID == null) {
                                    dataset.push({
                                        start: new Date(Number(chGMT(transfer[t].INTIME).slice(0, 4)), Number(chGMT(transfer[t].INTIME).slice(5, 7) - 1), Number(chGMT(transfer[t].INTIME).slice(8, 10)), Number(chGMT(transfer[t].INTIME).slice(11, 13)), Number(chGMT(transfer[t].INTIME).slice(14, 16)), Number(chGMT(transfer[t].INTIME).slice(17, 19))),
                                        content: 'Transfer to Unit ' + transfer[t].CURR_CAREUNIT,
                                        title: 'Time:' + Number(chGMT(transfer[t].INTIME).slice(0, 4)) + '.' + Number(chGMT(transfer[t].INTIME).slice(5, 7)) + '.' + Number(chGMT(transfer[t].INTIME).slice(8, 10)) + ' ' + chGMT(transfer[t].INTIME).slice(11, 13) + ':' + chGMT(transfer[t].INTIME).slice(14, 16) + ':' + chGMT(transfer[t].INTIME).slice(17, 19),
                                        group: 1
                                    });
                                } else {
                                    dataset.push({
                                        start: new Date(Number(chGMT(transfer[t].INTIME).slice(0, 4)), Number(chGMT(transfer[t].INTIME).slice(5, 7) - 1), Number(chGMT(transfer[t].INTIME).slice(8, 10)), Number(chGMT(transfer[t].INTIME).slice(11, 13)), Number(chGMT(transfer[t].INTIME).slice(14, 16)), Number(chGMT(transfer[t].INTIME).slice(17, 19))),
                                        title: 'Time:' + Number(chGMT(transfer[t].INTIME).slice(0, 4)) + '.' + Number(chGMT(transfer[t].INTIME).slice(5, 7)) + '.' + Number(chGMT(transfer[t].INTIME).slice(8, 10)) + ' ' + chGMT(transfer[t].INTIME).slice(11, 13) + ':' + chGMT(transfer[t].INTIME).slice(14, 16) + ':' + chGMT(transfer[t].INTIME).slice(17, 19),
                                        group: 1
                                    });
                                }

                            }


                        }

                        var icustayId = [icu[0].ICUSTAY_ID];

                        for (var u = 0; u < icu.length; u++) {
                            var icuflag = 0;
                            //icuid 1,2,3
                            for (var v = 0; v < icustayId.length; v++) {
                                if (icu[u].ICUSTAY_ID == icustayId[v]) {
                                    icuflag = 1
                                }
                            }
                            if (icuflag == 0) {
                                icustayId.push(icu[u].ICUSTAY_ID)
                            }
                        }


                        for (var v = 0; v < icustayId.length; v++) {
                            var intime = [];
                            var outtime = [];

                            for (var u = 0; u < icu.length; u++) {
                                if (icu[u].ICUSTAY_ID == icustayId[v]) {
                                    intime.push(icu[u].INTIME);
                                    outtime.push(icu[u].OUTTIME);
                                }
                            }

                            icustay.push({
                                INTIME: intime[0],
                                OUTTIME: outtime[outtime.length - 1],
                                ICUSTAY_ID: icustayId[v]
                            })

                        }


                        if (admit.length == discharge.length) {
                            for (var o = 0; o < admit.length; o++) {

                                dataset.push(
                                    {
                                        start: new Date(Number(chGMT(admit[o].INTIME).slice(0, 4)), Number(chGMT(admit[o].INTIME).slice(5, 7) - 1), Number(chGMT(admit[o].INTIME).slice(8, 10)), Number(chGMT(admit[o].INTIME).slice(11, 13)), Number(chGMT(admit[o].INTIME).slice(14, 16)), Number(chGMT(admit[o].INTIME).slice(17, 19))),
                                        end: new Date(Number(chGMT(discharge[o].OUTTIME).slice(0, 4)), Number(chGMT(discharge[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(discharge[o].OUTTIME).slice(8, 10)), Number(chGMT(discharge[o].OUTTIME).slice(11, 13)), Number(chGMT(discharge[o].OUTTIME).slice(14, 16)), Number(chGMT(discharge[o].OUTTIME).slice(17, 19))),
                                        content: 'HADM ID: ' + admit[o].HADM_ID + '<br><button onclick= "search_graph_lab(' + admit[o].HADM_ID + '); ">' + 'lab test' + '</button><button onclick= search_graph_emrsymptom(' + admit[o].HADM_ID + ')>' + 'emr symptoms' + '</button>',
                                        type: 'background',
                                        className: 'negative',
                                        group: 4
                                    }
                                )
                                dataset.push(
                                    {
                                        start: new Date(Number(chGMT(admit[o].INTIME).slice(0, 4)), Number(chGMT(admit[o].INTIME).slice(5, 7) - 1), Number(chGMT(admit[o].INTIME).slice(8, 10)), Number(chGMT(admit[o].INTIME).slice(11, 13)), Number(chGMT(admit[o].INTIME).slice(14, 16)), Number(chGMT(admit[o].INTIME).slice(17, 19))),
                                        end: new Date(Number(chGMT(discharge[o].OUTTIME).slice(0, 4)), Number(chGMT(discharge[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(discharge[o].OUTTIME).slice(8, 10)), Number(chGMT(discharge[o].OUTTIME).slice(11, 13)), Number(chGMT(discharge[o].OUTTIME).slice(14, 16)), Number(chGMT(discharge[o].OUTTIME).slice(17, 19))),
                                        type: 'background',
                                        className: 'negative',
                                        group: 3
                                    }
                                )
                                dataset.push(
                                    {
                                        start: new Date(Number(chGMT(admit[o].INTIME).slice(0, 4)), Number(chGMT(admit[o].INTIME).slice(5, 7) - 1), Number(chGMT(admit[o].INTIME).slice(8, 10)), Number(chGMT(admit[o].INTIME).slice(11, 13)), Number(chGMT(admit[o].INTIME).slice(14, 16)), Number(chGMT(admit[o].INTIME).slice(17, 19))),
                                        end: new Date(Number(chGMT(discharge[o].OUTTIME).slice(0, 4)), Number(chGMT(discharge[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(discharge[o].OUTTIME).slice(8, 10)), Number(chGMT(discharge[o].OUTTIME).slice(11, 13)), Number(chGMT(discharge[o].OUTTIME).slice(14, 16)), Number(chGMT(discharge[o].OUTTIME).slice(17, 19))),
                                        type: 'background',
                                        className: 'negative',
                                        group: 2
                                    }
                                )
                                dataset.push(
                                    {
                                        start: new Date(Number(chGMT(admit[o].INTIME).slice(0, 4)), Number(chGMT(admit[o].INTIME).slice(5, 7) - 1), Number(chGMT(admit[o].INTIME).slice(8, 10)), Number(chGMT(admit[o].INTIME).slice(11, 13)), Number(chGMT(admit[o].INTIME).slice(14, 16)), Number(chGMT(admit[o].INTIME).slice(17, 19))),
                                        end: new Date(Number(chGMT(discharge[o].OUTTIME).slice(0, 4)), Number(chGMT(discharge[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(discharge[o].OUTTIME).slice(8, 10)), Number(chGMT(discharge[o].OUTTIME).slice(11, 13)), Number(chGMT(discharge[o].OUTTIME).slice(14, 16)), Number(chGMT(discharge[o].OUTTIME).slice(17, 19))),
                                        type: 'background',
                                        className: 'negative',
                                        group: 1
                                    }
                                )
                                dataset.push(
                                    {
                                        start: new Date(Number(chGMT(admit[o].INTIME).slice(0, 4)), Number(chGMT(admit[o].INTIME).slice(5, 7) - 1), Number(chGMT(admit[o].INTIME).slice(8, 10)), Number(chGMT(admit[o].INTIME).slice(11, 13)), Number(chGMT(admit[o].INTIME).slice(14, 16)), Number(chGMT(admit[o].INTIME).slice(17, 19))),
                                        end: new Date(Number(chGMT(discharge[o].OUTTIME).slice(0, 4)), Number(chGMT(discharge[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(discharge[o].OUTTIME).slice(8, 10)), Number(chGMT(discharge[o].OUTTIME).slice(11, 13)), Number(chGMT(discharge[o].OUTTIME).slice(14, 16)), Number(chGMT(discharge[o].OUTTIME).slice(17, 19))),
                                        type: 'background',
                                        className: 'negative',
                                        group: 0
                                    }
                                )
                            }
                        }


                        if (admit.length - discharge.length == 1) {
                            for (var o = 0; o < discharge.length; o++) {
                                dataset.push(
                                    {
                                        start: new Date(Number(chGMT(admit[o].INTIME).slice(0, 4)), Number(chGMT(admit[o].INTIME).slice(5, 7) - 1), Number(chGMT(admit[o].INTIME).slice(8, 10)), Number(chGMT(admit[o].INTIME).slice(11, 13)), Number(chGMT(admit[o].INTIME).slice(14, 16)), Number(chGMT(admit[o].INTIME).slice(17, 19))),
                                        end: new Date(Number(chGMT(discharge[o].OUTTIME).slice(0, 4)), Number(chGMT(discharge[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(discharge[o].OUTTIME).slice(8, 10)), Number(chGMT(discharge[o].OUTTIME).slice(11, 13)), Number(chGMT(discharge[o].OUTTIME).slice(14, 16)), Number(chGMT(discharge[o].OUTTIME).slice(17, 19))),
                                        content: 'HADM ID: ' + admit[o].HADM_ID + '<br><button  onclick= "search_graph_lab(' + admit[o].HADM_ID + ');">' + 'lab test' + '</button><button id="buttonemrsymptom" onclick= search_graph_emrsymptom(' + admit[o].HADM_ID + ')>' + 'emr symptoms' + '</button>',
                                        type: 'background',
                                        className: 'negative',
                                        group: 4
                                    }
                                )
                                dataset.push(
                                    {
                                        start: new Date(Number(chGMT(admit[o].INTIME).slice(0, 4)), Number(chGMT(admit[o].INTIME).slice(5, 7) - 1), Number(chGMT(admit[o].INTIME).slice(8, 10)), Number(chGMT(admit[o].INTIME).slice(11, 13)), Number(chGMT(admit[o].INTIME).slice(14, 16)), Number(chGMT(admit[o].INTIME).slice(17, 19))),
                                        end: new Date(Number(chGMT(discharge[o].OUTTIME).slice(0, 4)), Number(chGMT(discharge[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(discharge[o].OUTTIME).slice(8, 10)), Number(chGMT(discharge[o].OUTTIME).slice(11, 13)), Number(chGMT(discharge[o].OUTTIME).slice(14, 16)), Number(chGMT(discharge[o].OUTTIME).slice(17, 19))),
                                        type: 'background',
                                        className: 'negative',
                                        group: 3
                                    }
                                )
                                dataset.push(
                                    {
                                        start: new Date(Number(chGMT(admit[o].INTIME).slice(0, 4)), Number(chGMT(admit[o].INTIME).slice(5, 7) - 1), Number(chGMT(admit[o].INTIME).slice(8, 10)), Number(chGMT(admit[o].INTIME).slice(11, 13)), Number(chGMT(admit[o].INTIME).slice(14, 16)), Number(chGMT(admit[o].INTIME).slice(17, 19))),
                                        end: new Date(Number(chGMT(discharge[o].OUTTIME).slice(0, 4)), Number(chGMT(discharge[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(discharge[o].OUTTIME).slice(8, 10)), Number(chGMT(discharge[o].OUTTIME).slice(11, 13)), Number(chGMT(discharge[o].OUTTIME).slice(14, 16)), Number(chGMT(discharge[o].OUTTIME).slice(17, 19))),
                                        type: 'background',
                                        className: 'negative',
                                        group: 2
                                    }
                                )
                                dataset.push(
                                    {
                                        start: new Date(Number(chGMT(admit[o].INTIME).slice(0, 4)), Number(chGMT(admit[o].INTIME).slice(5, 7) - 1), Number(chGMT(admit[o].INTIME).slice(8, 10)), Number(chGMT(admit[o].INTIME).slice(11, 13)), Number(chGMT(admit[o].INTIME).slice(14, 16)), Number(chGMT(admit[o].INTIME).slice(17, 19))),
                                        end: new Date(Number(chGMT(discharge[o].OUTTIME).slice(0, 4)), Number(chGMT(discharge[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(discharge[o].OUTTIME).slice(8, 10)), Number(chGMT(discharge[o].OUTTIME).slice(11, 13)), Number(chGMT(discharge[o].OUTTIME).slice(14, 16)), Number(chGMT(discharge[o].OUTTIME).slice(17, 19))),
                                        type: 'background',
                                        className: 'negative',
                                        group: 1
                                    }
                                )
                                dataset.push(
                                    {
                                        start: new Date(Number(chGMT(admit[o].INTIME).slice(0, 4)), Number(chGMT(admit[o].INTIME).slice(5, 7) - 1), Number(chGMT(admit[o].INTIME).slice(8, 10)), Number(chGMT(admit[o].INTIME).slice(11, 13)), Number(chGMT(admit[o].INTIME).slice(14, 16)), Number(chGMT(admit[o].INTIME).slice(17, 19))),
                                        end: new Date(Number(chGMT(discharge[o].OUTTIME).slice(0, 4)), Number(chGMT(discharge[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(discharge[o].OUTTIME).slice(8, 10)), Number(chGMT(discharge[o].OUTTIME).slice(11, 13)), Number(chGMT(discharge[o].OUTTIME).slice(14, 16)), Number(chGMT(discharge[o].OUTTIME).slice(17, 19))),
                                        type: 'background',
                                        className: 'negative',
                                        group: 0

                                    }
                                )
                            }

                        }


                        for (var o = 0; o < icustay.length; o++) {
                            dataset.push(
                                {
                                    start: new Date(Number(chGMT(icustay[o].INTIME).slice(0, 4)), Number(chGMT(icustay[o].INTIME).slice(5, 7) - 1), Number(chGMT(icustay[o].INTIME).slice(8, 10)), Number(chGMT(icustay[o].INTIME).slice(11, 13)), Number(chGMT(icustay[o].INTIME).slice(14, 16)), Number(chGMT(icustay[o].INTIME).slice(17, 19))),
                                    end: new Date(Number(chGMT(icustay[o].OUTTIME).slice(0, 4)), Number(chGMT(icustay[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(icustay[o].OUTTIME).slice(8, 10)), Number(chGMT(icustay[o].OUTTIME).slice(11, 13)), Number(chGMT(icustay[o].OUTTIME).slice(14, 16)), Number(chGMT(icustay[o].OUTTIME).slice(17, 19))),
                                    content: 'ICUSTAY ID: ' + icustay[o].ICUSTAY_ID + '<br><button  onclick= "search_graph_sign(' + icustay[o].ICUSTAY_ID + ')">' + 'signs' + '</button><button  onclick= "search_graph_med(' + icustay[o].ICUSTAY_ID + ')">' + 'medication' + '</button>',
                                    type: 'background',
                                    group: 3
                                }
                            )
                            dataset.push(
                                {
                                    start: new Date(Number(chGMT(icustay[o].INTIME).slice(0, 4)), Number(chGMT(icustay[o].INTIME).slice(5, 7) - 1), Number(chGMT(icustay[o].INTIME).slice(8, 10)), Number(chGMT(icustay[o].INTIME).slice(11, 13)), Number(chGMT(icustay[o].INTIME).slice(14, 16)), Number(chGMT(icustay[o].INTIME).slice(17, 19))),
                                    end: new Date(Number(chGMT(icustay[o].OUTTIME).slice(0, 4)), Number(chGMT(icustay[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(icustay[o].OUTTIME).slice(8, 10)), Number(chGMT(icustay[o].OUTTIME).slice(11, 13)), Number(chGMT(icustay[o].OUTTIME).slice(14, 16)), Number(chGMT(icustay[o].OUTTIME).slice(17, 19))),
                                    type: 'background',
                                    group: 2
                                }
                            )
                            dataset.push(
                                {
                                    start: new Date(Number(chGMT(icustay[o].INTIME).slice(0, 4)), Number(chGMT(icustay[o].INTIME).slice(5, 7) - 1), Number(chGMT(icustay[o].INTIME).slice(8, 10)), Number(chGMT(icustay[o].INTIME).slice(11, 13)), Number(chGMT(icustay[o].INTIME).slice(14, 16)), Number(chGMT(icustay[o].INTIME).slice(17, 19))),
                                    end: new Date(Number(chGMT(icustay[o].OUTTIME).slice(0, 4)), Number(chGMT(icustay[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(icustay[o].OUTTIME).slice(8, 10)), Number(chGMT(icustay[o].OUTTIME).slice(11, 13)), Number(chGMT(icustay[o].OUTTIME).slice(14, 16)), Number(chGMT(icustay[o].OUTTIME).slice(17, 19))),
                                    type: 'background',
                                    group: 1
                                }
                            )
                            dataset.push(
                                {
                                    start: new Date(Number(chGMT(icustay[o].INTIME).slice(0, 4)), Number(chGMT(icustay[o].INTIME).slice(5, 7) - 1), Number(chGMT(icustay[o].INTIME).slice(8, 10)), Number(chGMT(icustay[o].INTIME).slice(11, 13)), Number(chGMT(icustay[o].INTIME).slice(14, 16)), Number(chGMT(icustay[o].INTIME).slice(17, 19))),
                                    end: new Date(Number(chGMT(icustay[o].OUTTIME).slice(0, 4)), Number(chGMT(icustay[o].OUTTIME).slice(5, 7) - 1), Number(chGMT(icustay[o].OUTTIME).slice(8, 10)), Number(chGMT(icustay[o].OUTTIME).slice(11, 13)), Number(chGMT(icustay[o].OUTTIME).slice(14, 16)), Number(chGMT(icustay[o].OUTTIME).slice(17, 19))),
                                    type: 'background',
                                    group: 0
                                }
                            )

                        }


                        var chartdata = new vis.DataSet(dataset);
                        var options = {
                            editable: false,

                            groupOrder: function (a, b) {
                                return a.value - b.value;
                            }
                        };


                        var html0 = "<span>Supports zooming & moving with the mouse.Click to <input type='button' value='Fit all items' id='fit'></span><br><br>"
                        $("#chartdiv").append($(html0));


                        document.getElementById('fit').onclick = function () {
                            timeline.fit();
                        };


                        var container = document.getElementById('chartdiv');
                        var timeline = new vis.Timeline(container, chartdata, options, groups);

                    }
                }

            })

        }


        function search_graph_lab(Term1) {
        //var Term =
        !{JSON.stringify(term)};
            $.ajax({
                url: "/search/graph_lab/list",
                type: "POST",
                data: {term: Term1},

                success: function (data) {

                    if (data == '') {
                        alert("No or lack of relevant data!" + "\n" + "Click to close the message box.");
                    } else {
                        var item = [];
                        var distinctItemId = [];
                        var distinctLabel = [];

                        var id = [];
                        var label = [];
                        var charttime = [];
                        var value = [];
                        var unit = [];
                        var flag = [];


                        var seriesArr = [];

                        for (var i = 0; i < data.length; i++) {


                            id.push(data[i].ITEM_ID);
                            label.push(data[i].LABEL);
                            charttime.push(data[i].CHARTTIME);
                            value.push(data[i].VALUE);


                            if (!item[data[i].ITEMID]) {
                                distinctItemId.push(data[i].ITEMID);
                                distinctLabel.push(data[i].LABEL);
                                item[data[i].ITEMID] = true;
                            }
                        }


                        for (var j = 0; j < distinctItemId.length; j++) {

                            var labTestData = [];
                            var k = 0;

                            for (var r = 0; r < data.length; r++) {

                                if (data[r].ITEMID == distinctItemId[j]) {

                                    labTestData[k] = {
                                        x: Date.UTC(chGMT(data[r].CHARTTIME).slice(0, 4), chGMT(data[r].CHARTTIME).slice(5, 7) - 1, chGMT(data[r].CHARTTIME).slice(8, 10), chGMT(data[r].CHARTTIME).slice(11, 13), chGMT(data[r].CHARTTIME).slice(14, 16), chGMT(data[r].CHARTTIME).slice(17, 19)),
                                        y: Number(data[r].VALUE),
                                        unit: data[r].VALUEUOM,
                                        flag: data[r].FLAG
                                    }
                                    k++;
                                }
                            }

                            if (j < 10) {
                                seriesArr.push({
                                    name: distinctLabel[j],
                                    data: labTestData,
                                    color: Highcharts.getOptions().colors[j],
                                    visible: true
                                });
                            } else {
                                seriesArr.push({
                                    name: distinctLabel[j],
                                    data: labTestData,
                                    color: Highcharts.getOptions().colors[j],
                                    visible: false
                                });

                            }

                        }


                        //////////// LAB TEST DATA ////////////

                        function syncExtremes(e) {
                            var thisChart = this.chart;
                            if (e.trigger !== 'syncExtremes') {
                                Highcharts.each(Highcharts.charts, function (chart) {
                                    if (chart !== thisChart) {
                                        if (chart.xAxis[0].setExtremes) {
                                            chart.xAxis[0].setExtremes(e.min, e.max, undefined, false, {trigger: 'syncExtremes'});
                                        }
                                    }
                                });
                            }
                        }

                        Highcharts.chart('labchart', {
                            chart: {
                                type: 'spline',
                                marginLeft: 150,
                                zoomType: 'xy',
                                panning: true,
                                panKey: 'ctrl'
                            },


                            title: {
                                text: 'LAB TEST-HADMID: ' + Term1
                            },
                            subtitle: {
                                text: 'Drag to select the zoom area; Press ctrl to pan the chart left or right; Click on the legend to hide or resume display.'
                            },

                            xAxis: {
                                type: 'datetime',
                                events: {
                                    setExtremes: syncExtremes
                                },
                                title: {
                                    text: 'Time In Hospital'
                                }
                            },

                            yAxis: [{
                                title: {
                                    text: 'Value'
                                },
                                tickInterval: 1

                            }],
                            tooltip: {
                                headerFormat: '<b>Item:{series.name}</b><br>',
                                pointFormat: '<b>Result:</b>{point.y} {point.unit}<br><b>Flag:</b>{point.flag}<br>{point.x:%A,%b.%e,%Y,%H:%M:%S}',
                                positioner: function () {
                                    return {x: this.chart.chartWidth - this.label.width - 1, y: 0};
                                },

                                crosshairs: [{            
                                    width: 1,
                                    color: "#006cee",
                                    dashStyle: 'longdashdot'

                                }, {
                                    width: 1,
                                    color: "#006cee",
                                    dashStyle: 'longdashdot'
                                }]
                            },
                            legend: {
                                layout: 'vertical',
                                align: 'right',
                                verticalAlign: 'middle'
                            },

                            plotOptions: {
                                series: {
                                    label: {
                                        connectorAllowed: false
                                    }
                                },
                                spline: {
                                    marker: {
                                        enabled: true
                                    }
                                }
                            },


                            series: seriesArr

                        });

                    }
                }

            })
        }



        function search_graph_sign(Term2) {
            //var Term =
            !{JSON.stringify(term)};
            $.ajax({
                url: "/search/graph_sign/list",
                type: "POST",
                data: {term: Term2},

                success: function (data) {

                    if (data == '') {
                        alert("No or lack of relevant data!" + "\n" + "Click to close the message box.");

                    } else {
                        var sign_time = [];
                        var sign_arr = [];
                        var sign_arr1 = [];
                        var sign_arr2 = [];
                        var sign_arr3 = [];
                        var sign_arr4 = [];
                        var sign_arr5 = [];
                        var sign_arr6 = [];
                        var sign_arr7 = [];
                        var sign_arr8 = [];
                        var k10 = 0;
                        var k20 = 0;
                        var k30 = 0;
                        var k40 = 0;
                        var k50 = 0;
                        var k60 = 0;
                        var k70 = 0;
                        var k80 = 0;


                        //////////// VITAL SIGN DATA ////////////


                        sign_arr[0] = data[0];
                        sign_time[0] = sign_arr[0].CHARTTIME;
                        var s = 1;
                        for (var p = 1; p < data.length; p++) {
                            if (data[p].CHARTTIME != data[p - 1].CHARTTIME) {
                                sign_arr[s] = data[p];
                                sign_time[s] = sign_arr[s].CHARTTIME;
                                s++;
                            }
                        }


                        for (var ks = 0; ks < s; ks++) {
                            if (sign_arr[ks].UrineOutput != null) {
                                sign_arr1[k10] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].UrineOutput)
                                }
                                k10++;
                            }
                            if (sign_arr[ks].DiastolicPressure != null) {
                                sign_arr2[k20] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].DiastolicPressure)
                                }
                                k20++;
                            }
                            if (sign_arr[ks].SystolicPressure != null) {
                                sign_arr3[k30] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].SystolicPressure)
                                }
                                k30++;
                            }
                            if (sign_arr[ks].Temperature != null) {
                                sign_arr4[k40] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].Temperature)
                                }
                                k40++;
                            }
                            if (sign_arr[ks].OxygenSaturation != null) {
                                sign_arr5[k50] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].OxygenSaturation)
                                }
                                k50++;
                            }
                            if (sign_arr[ks].BloodGlucose != null) {
                                sign_arr6[k60] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].BloodGlucose)
                                }
                                k60++;
                            }
                            if (sign_arr[ks].HeartRate != null) {
                                sign_arr7[k70] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].HeartRate)
                                }
                                k70++;
                            }
                            if (sign_arr[ks].RespiratoryRate != null) {
                                sign_arr8[k80] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].RespiratoryRate)
                                }
                                k80++;
                            }

                        }


                        $(function () {
                            
                            function syncExtremes(e) {
                                var thisChart = this.chart;
                                if (e.trigger !== 'syncExtremes') {
                                    Highcharts.each(Highcharts.charts, function (chart) {
                                        if (chart !== thisChart) {
                                            if (chart.xAxis[0].setExtremes) {
                                                chart.xAxis[0].setExtremes(e.min, e.max, undefined, false, {trigger: 'syncExtremes'});
                                            }
                                        }
                                    });
                                }
                            }


                            Highcharts.chart('timechart1', {
                                chart: {
                                    type: 'spline',
                                    marginLeft: 150,
                                    zoomType: 'xy',
                                    panning: true,
                                    panKey: 'ctrl'

                                },
                                title: {
                                    text: 'VITAL SIGNS-ICUSTAYID: ' + Term2
                                },
                                subtitle: {
                                    text: 'Drag to select the zoom area; Press ctrl to pan the chart left or right; Click on the legend to hide or resume display.'
                                },
                                xAxis: {
                                    type: 'datetime',

                                    events: {
                                        setExtremes: syncExtremes
                                    },


                                    title: {
                                        text: 'Time In ICU'
                                    }

                                },
                                yAxis: [{
                                    title: {
                                        text: 'Measurement, Absolute Value'
                                    },
                                    tickInterval: 1,
                                    min: 0
                                }],

                                tooltip: {
                                    headerFormat: '<b>{series.name}:{point.y}</b><br>',
                                    pointFormat: '{point.x:%A,%b.%e,%Y,%H:%M:%S} ',
                                    positioner: function () {
                                        return {x: this.chart.chartWidth - this.label.width - 1, y: 0};
                                    },
                                   
                                    crosshairs: [{           
                                        width: 1,
                                        color: "#006cee",
                                        dashStyle: 'longdashdot'

                                    }, {
                                        width: 1,
                                        color: "#006cee",
                                        dashStyle: 'longdashdot'
                                    }]
                                },
                               
                                legend: {
                                    layout: 'vertical',
                                    align: 'right',
                                    verticalAlign: 'middle'
                                },

                                plotOptions: {
                                    series: {
                                        label: {
                                            connectorAllowed: false
                                        }
                                    },
                                    spline: {
                                        marker: {
                                            enabled: true
                                        }
                                    }
                                },

                                colors: ['#ae0000', '#ff85e5', '#036', '#ffc300', '#3ecc8c', '#6CF', '#696969', '#FF8C00'],
                                series: [
                                    {
                                    name: 'Urine Output',
                                    data: sign_arr1
                                },
                                    {
                                        name: 'Diastolic Pressure',
                                        data: sign_arr2
                                    },
                                    {
                                        name: 'Systolic Pressure',
                                        data: sign_arr3
                                    },
                                    {
                                        name: 'Temperature',
                                        data: sign_arr4
                                    },
                                    {
                                        name: 'Oxygen Saturation',
                                        data: sign_arr5
                                    },
                                    {
                                        name: 'Blood Glucose',
                                        data: sign_arr6
                                    },
                                    {
                                        name: 'Heart Rate',
                                        data: sign_arr7
                                    },
                                    {
                                        name: 'Respiratory Rate',
                                        data: sign_arr8
                                    }
                                ]
                            });

                        });
                    }
                }
            })
        }



        function search_graph_med(Term2) {
            //var Term =
            !{JSON.stringify(term)};
            $.ajax({
                url: "/search/graph_med/list",
                type: "POST",
                data: {term: Term2},

                success: function (data) {

                    if (data == '') {
                        alert("No or lack of relevant data!" + "\n" + "Click to close the message box.");

                    } else {
                        var drugcategory = [];
                        var drugresult = [];
                        var obj = {};
                        var arrData = [];

                        var starttime = [];
                        var endtime = [];
                        var strength = [];
                        var dosevalue = [];
                        var doseunit = [];
                        var dosechange = [];



                        ////////DRUG DATA/////////


                        var drug = [data[0]];
                        var drugflag = 0;


                        for (var w = 0; w < data.length; w++) {
                            for (var o = 0; o < drug.length; o++) {
                                if (data[w].DRUG_NAME_EN == drug[o].DRUG_NAME_EN && data[w].STARTDATE == drug[o].STARTDATE && data[w].ENDDATE == drug[o].ENDDATE && data[w].PROD_STRENGTH == drug[o].PROD_STRENGTH && data[w].DOSE_VAL_RX == drug[o].DOSE_VAL_RX && data[w].DOSE_UNIT_RX == drug[o].DOSE_UNIT_RX) drugflag = 1;
                            }
                            if (drugflag == 0) drug.push(data[w]);
                            drugflag = 0;
                        }


                        var c = 0;

                        for (var q = 0; q < drug.length; q++) {
                            drugcategory[c] = [drug[q].DRUG_NAME_EN];
                            starttime[c] = [drug[q].STARTDATE];
                            if (drug[q].ENDDATE == null) endtime[c] = [drug[q].STARTDATE];
                            else endtime[c] = [drug[q].ENDDATE];
                            strength[c] = [drug[q].PROD_STRENGTH];
                            dosevalue[c] = [drug[q].DOSE_VAL_RX];
                            doseunit[c] = [drug[q].DOSE_UNIT_RX];
                            c++;
                        }

                        for (var i = 0; i < drug.length; i++) {

                            if (!obj[drugcategory[i]]) {
                                drugresult.push(drugcategory[i]);
                                obj[drugcategory[i]] = true;
                            }

                        }
                        drugresult.sort(); 



                        for (var t = 0; t < drugresult.length; t++) {
                            var samedrug = [];
                            var j = 0;
                            for (var u = 0; u < c; u++) {
                                if (drugcategory[u][0] == drugresult[t][0]) {
                                    samedrug[j] = u;
                                    j++;
                                }
                            }

                            var value = [];
                            for (var j0 = 0; j0 < j; j0++) {


                                value[j0] = parseFloat(dosevalue[samedrug[j0]][0]);
                                if (doseunit[samedrug[j0]][0] == "g") value[j0] = value[j0] * 1000000;
                                else if (doseunit[samedrug[j0]][0] == "mg" || doseunit[samedrug[j0]][0] == "mg/ml" || doseunit[samedrug[j0]][0] == "mg/kg" || doseunit[samedrug[j0]][0] == "mg/hr") value[j0] = value[j0] * 1000;
                                else if (doseunit[samedrug[j0]][0] == "mg/min" || doseunit[samedrug[j0]][0] == "mg/kg/hr") value[j0] = value[j0] * 1000 / 60;
                                else if (doseunit[samedrug[j0]][0] == "mg/day" || doseunit[samedrug[j0]][0] == "mg/24h") value[j0] = value[j0] * 1000 / 24;

                                if (j0 == 0) dosechange[samedrug[j0]] = "I";
                                else if (value[j0] > value[j0 - 1]) {
                                    dosechange[samedrug[j0]] = "↑";
                                } else if (value[j0] < value[j0 - 1]) {
                                    dosechange[samedrug[j0]] = "↓";
                                } else if (value[j0] == value[j0 - 1]) {
                                    dosechange[samedrug[j0]] = "-";
                                } else dosechange[samedrug[j0]] = "x";
                            }


                        }


                        for (var r = 0; r < c; r++) {

                            if (starttime[r][0] == endtime[r][0]) {

                                var stp = starttime[r][0]
                                var tp = new Date(stp)
                                var edt = new Date(tp.setHours(tp.getHours() + 1)).format("yyyy-MM-dd hh:mm:ss"); 

                                arrData[r] = {
                                    x: Date.UTC(chGMT(starttime[r][0]).slice(0, 4), chGMT(starttime[r][0]).slice(5, 7) - 1, chGMT(starttime[r][0]).slice(8, 10), chGMT(starttime[r][0]).slice(11, 13), chGMT(starttime[r][0]).slice(14, 16), chGMT(starttime[r][0]).slice(17, 19)),
                                    x2: Date.UTC(chGMT(edt).slice(0, 4), chGMT(edt).slice(5, 7) - 1, chGMT(edt).slice(8, 10), chGMT(edt).slice(11, 13), chGMT(edt).slice(14, 16), chGMT(edt).slice(17, 19)),
                                    y: in_array(drugcategory[r], drugresult),
                                    strength: strength[r][0],
                                    drug: drugcategory[r][0],
                                    dosevalue: dosevalue[r][0],
                                    doseunit: doseunit[r][0],
                                    dosechange: dosechange[r]
                                }
                            } else {

                                arrData[r] = {
                                    x: Date.UTC(chGMT(starttime[r][0]).slice(0, 4), chGMT(starttime[r][0]).slice(5, 7) - 1, chGMT(starttime[r][0]).slice(8, 10), chGMT(starttime[r][0]).slice(11, 13), chGMT(starttime[r][0]).slice(14, 16), chGMT(starttime[r][0]).slice(17, 19)),
                                    x2: Date.UTC(chGMT(endtime[r][0]).slice(0, 4), chGMT(endtime[r][0]).slice(5, 7) - 1, chGMT(endtime[r][0]).slice(8, 10), chGMT(endtime[r][0]).slice(11, 13), chGMT(endtime[r][0]).slice(14, 16), chGMT(endtime[r][0]).slice(17, 19)),
                                    y: in_array(drugcategory[r], drugresult),
                                    strength: strength[r][0],
                                    drug: drugcategory[r][0],
                                    dosevalue: dosevalue[r][0],
                                    doseunit: doseunit[r][0],
                                    dosechange: dosechange[r]

                                }

                            }
                        }

                        $(function () {

                            function syncExtremes(e) {
                                var thisChart = this.chart;
                                if (e.trigger !== 'syncExtremes') {
                                    Highcharts.each(Highcharts.charts, function (chart) {
                                        if (chart !== thisChart) {
                                            if (chart.xAxis[0].setExtremes) {
                                                chart.xAxis[0].setExtremes(e.min, e.max, undefined, false, {trigger: 'syncExtremes'});
                                            }
                                        }
                                    });
                                }
                            }


                            Highcharts.chart('timechart2', {
                                chart: {
                                    type: 'xrange',
                                    marginLeft: 150,
                                    zoomType: 'xy',
                                    panning: true,
                                    panKey: 'ctrl'


                                },
                                title: {
                                    text: 'MEDICATION-ICUSTAYID: ' + Term2
                                },
                                subtitle: {
                                    text: 'Drag to select the zoom area; Press ctrl to pan the chart left or right; Click on the legend to hide or resume display.'
                                },


                                xAxis: {
                                    type: 'datetime',
                                    events: {
                                        setExtremes: syncExtremes
                                    },
                                    title: {
                                        text: 'Medication Time'
                                    }


                                },

                                yAxis: [{
                                    title: {
                                        text: ''
                                    },
                                    categories: drugresult,
                                    reversed: true,
                                    tickInterval: 1
                                }],


                                tooltip: {

                                    headerFormat: '{point.x:%A,%b.%e,%Y,%H:%M:%S}-{point.x2:%A,%b.%e,%Y,%H:%M:%S}<br>',
                                    pointFormat: '<b>Drug:</b>{point.drug}<br><b>Strength:</b>{point.strength}<br><b>Dosage:</b>{point.dosevalue}{point.doseunit} ',
                                    positioner: function () {
                                        return {x: this.chart.chartWidth - this.label.width - 1, y: 0};
                                    },


                                    crosshairs: [{            
                                        width: 1,
                                        color: "#006cee",
                                        dashStyle: 'longdashdot'

                                    }, {
                                        width: 1,
                                        color: "#006cee",
                                        dashStyle: 'longdashdot'
                                    }]

                                },


                                legend: {
                                    layout: 'vertical',
                                    align: 'right',
                                    verticalAlign: 'middle'

                                },


                                series: [{
                                    name: 'Drugs',
                                    dashStyle: 'solid',
                                    pointWidth: 5,
                                    data: arrData,
                                    dataLabels: {
                                        enabled: true,
                                        defer: false,
                                        inside: true,
                                        align: 'center',
                                        format: '{point.dosechange}'
                                    }

                                }]
                            });
                        });
                    }
                }
            })
        }



        function search_graph_surgeryvital(Term30, Term31) {
            //var Term =
            !{JSON.stringify(term)};
            $.ajax({
                url: "/search/graph_surgeryvital/list",
                type: "POST",
                data: {
                    term: Term30,
                    term1: Term31
                },

                success: function (data) {


                    var obj = {};
                    var obj1 = {};
                    var obj2 = {};
                    var obj3 = {};
                    var obj4 = {};
                    var obj5 = {};
                    var obj6 = {};
                    var arrData = [];

                    var tl = 0;

                    var sign_time = [];
                    var sign_arr = [];
                    var sign_arr1 = [];
                    var sign_arr2 = [];
                    var sign_arr3 = [];
                    var sign_arr4 = [];
                    var sign_arr5 = [];
                    var sign_arr6 = [];
                    var sign_arr7 = [];

                    var k10 = 0;
                    var k20 = 0;
                    var k30 = 0;
                    var k40 = 0;
                    var k50 = 0;
                    var k60 = 0;
                    var k70 = 0;


                    if (data == '') {
                        alert("No or lack of relevant data!" + "\n" + "Click to close the message box.");

                    } else {
                      
                        //////////// SURGERY VITAL SIGN DATA ////////////


                        sign_arr[0] = data[0];
                        sign_time[0] = sign_arr[0].MONITOR_TIME;
                        var s = 1;
                        for (var p = 1; p < data.length; p++) {
                            if (data[p].MONITOR_TIME != data[p - 1].MONITOR_TIME) {
                                sign_arr[s] = data[p];
                                sign_time[s] = sign_arr[s].MONITOR_TIME;
                                s++;
                            }
                        }


                        for (var ks = 0; ks < s; ks++) {
                            if (sign_arr[ks].HeartRate != null) {
                                sign_arr1[k10] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].HeartRate)
                                }
                                k10++;
                            }
                            if (sign_arr[ks].Pulse != null) {
                                sign_arr2[k20] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].Pulse)
                                }
                                k20++;
                            }
                            if (sign_arr[ks].SystolicPressure != null) {
                                sign_arr3[k30] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].SystolicPressure)
                                }
                                k30++;
                            }
                            if (sign_arr[ks].DiastolicPressure != null) {
                                sign_arr4[k40] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].DiastolicPressure)
                                }
                                k40++;
                            }
                            if (sign_arr[ks].CentralVenousPressure != null) {
                                sign_arr5[k50] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].CentralVenousPressure)
                                }
                                k50++;
                            }
                            if (sign_arr[ks].RespiratoryRate != null) {
                                sign_arr6[k60] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].RespiratoryRate)
                                }
                                k60++;
                            }
                            if (sign_arr[ks].O2Saturation != null) {
                                sign_arr7[k70] = {
                                    x: Date.UTC(chGMT(sign_time[ks]).slice(0, 4), chGMT(sign_time[ks]).slice(5, 7) - 1, chGMT(sign_time[ks]).slice(8, 10), chGMT(sign_time[ks]).slice(11, 13), chGMT(sign_time[ks]).slice(14, 16), chGMT(sign_time[ks]).slice(17, 19)),
                                    y: Number(sign_arr[ks].O2Saturation)
                                }
                                k70++;
                            }


                        }


                        $(function () {
                            function syncExtremes(e) {
                                var thisChart = this.chart;
                                if (e.trigger !== 'syncExtremes') {
                                    Highcharts.each(Highcharts.charts, function (chart) {
                                        if (chart !== thisChart) {
                                            if (chart.xAxis[0].setExtremes) {
                                                chart.xAxis[0].setExtremes(e.min, e.max, undefined, false, {trigger: 'syncExtremes'});
                                            }
                                        }
                                    });
                                }
                            }

                            Highcharts.chart('timechart3', {
                                chart: {
                                    type: 'spline',
                                    marginLeft: 150,
                                    zoomType: 'xy',
                                    panning: true,
                                    panKey: 'ctrl'

                                },
                                title: {
                                    text: 'SURGERY VITAL SIGNS-HADMID: ' + Term30 + ' OPERID: ' + Term31
                                },
                                subtitle: {
                                    text: 'Drag to select the zoom area; Press ctrl to pan the chart left or right; Click on the legend to hide or resume display.'
                                },
                                xAxis: {
                                    type: 'datetime',
                                    events: {
                                        setExtremes: syncExtremes 
                                    },
                                    title: {
                                        text: 'Time In Hospital'
                                    }

                                },
                                yAxis: [{
                                    title: {
                                        text: 'Measurement, Absolute Value'
                                    },
                                    tickInterval: 1,
                                    min: 0
                                }],

                                tooltip: {
                                    headerFormat: '<b>{series.name}:{point.y}</b><br>',
                                    pointFormat: '{point.x:%A,%b.%e,%Y,%H:%M:%S} ',
                                    positioner: function () {
                                        return {x: this.chart.chartWidth - this.label.width - 1, y: 0};
                                    },
                                
                                    crosshairs: [{           
                                        width: 1,
                                        color: "#006cee",
                                        dashStyle: 'longdashdot'

                                    }, {
                                        width: 1,
                                        color: "#006cee",
                                        dashStyle: 'longdashdot'
                                    }]
                                },
                          

                                legend: {
                                    layout: 'vertical',
                                    align: 'right',
                                    verticalAlign: 'middle'
                                },

                                plotOptions: {
                                    series: {
                                        label: {
                                            connectorAllowed: false
                                        }
                                    },
                                    spline: {
                                        marker: {
                                            enabled: true
                                        }
                                    }
                                },

                                colors: ['#ae0000', '#ff85e5', '#036', '#ffc300', '#3ecc8c', '#6CF', '#696969'],
                                series: [{
                                    name: 'Heart Rate',
                                    data: sign_arr1
                                },
                                    {
                                        name: 'Pulse',
                                        data: sign_arr2
                                    },
                                    {
                                        name: 'Systolic Pressure',
                                        data: sign_arr3
                                    },
                                    {
                                        name: 'Diastolic Pressure',
                                        data: sign_arr4
                                    },
                                    {
                                        name: 'Central Venous Pressure',
                                        data: sign_arr5
                                    },
                                    {
                                        name: 'Respiratory Rate',
                                        data: sign_arr6
                                    },
                                    {
                                        name: 'O2 Saturation',
                                        data: sign_arr7
                                    }
                                ]
                            });

                        });
                    }
                }
            })
        }

        function search_graph_emrsymptom(Term4) {
        //var Term =
        !{JSON.stringify(term)};
            $.ajax({
                url: "/search/graph_emrsymptom/list",
                type: "POST",
                data: {term: Term4},

                success: function (data) {

                    var symcategory = [];
                    var symcategory_p = [];
                    var symcategory_n = [];
                    var symresult = [];
                    var obj = {};
                    var arrData_p = [];
                    var arrData_n = [];
                    var starttime = [];
                    var starttime_p = [];
                    var starttime_n = [];
                    var endtime = [];
                    var attribute = [];
                    var attribute_p = [];
                    var attribute_n = [];


                    if (data == '') {
                        alert("No or lack of relevant data!" + "\n" + "Click to close the message box.");

                    } else {
                      
                        ////////EMR SYMPTOM DATA/////////

                        var c = 0;

                        for (var q = 0; q < data.length; q++) {
                            symcategory[c] = [data[q].SYMPTOM_NAME_EN];
                            starttime[c] = [data[q].RECORD_TIME];
                            attribute[c] = [data[q].SYMPTOM_ATTRIBUTE];
                            c++;
                        }

                        for (var i = 0; i < data.length; i++) {
                            if (!obj[symcategory[i]]) {
                                symresult.push(symcategory[i]);
                                obj[symcategory[i]] = true;
                            }
                        }
                        symresult.sort(); 

                        var index_p = 0
                        var index_n = 0
                        for (var m = 0; m < c; m++) {
                            if (attribute[m][0].indexOf('+') == 0) {  
                                symcategory_p[index_p] = symcategory[m];
                                starttime_p[index_p] = starttime[m];
                                attribute_p[index_p] = attribute[m];
                                index_p++;
                            } else {
                                symcategory_n[index_n] = symcategory[m];
                                starttime_n[index_n] = starttime[m];
                                attribute_n[index_n] = attribute[m];
                                index_n++;
                            }

                        }


                        for (var r = 0; r < index_p; r++) {
                            for (var u = symcategory_p.length - 1; u >= 0; u--) {
                                if (symcategory_p[r][0] == symcategory_p[u][0]) break;
                            }


                            arrData_p[r] = {
                                x: Date.UTC(chGMT(starttime_p[r][0]).slice(0, 4), chGMT(starttime_p[r][0]).slice(5, 7) - 1, chGMT(starttime_p[r][0]).slice(8, 10), chGMT(starttime_p[r][0]).slice(11, 13), chGMT(starttime_p[r][0]).slice(14, 16), chGMT(starttime_p[r][0]).slice(17, 19)),
                                x2: Date.UTC(chGMT(starttime_p[u][0]).slice(0, 4), chGMT(starttime_p[u][0]).slice(5, 7) - 1, chGMT(starttime_p[u][0]).slice(8, 10), chGMT(starttime_p[u][0]).slice(11, 13), chGMT(starttime_p[u][0]).slice(14, 16), chGMT(starttime_p[u][0]).slice(17, 19)),
                                y: in_array(symcategory_p[r], symresult),
                                sym: symcategory_p[r][0],
                                attribute: attribute_p[r],
                                color: '#ffc1c1'
                            }
                        }
                        for (var r = 0; r < index_n; r++) {
                            for (var v = symcategory_n.length - 1; v >= 0; v--) {
                                if (symcategory_n[r][0] == symcategory_n[v][0]) break;
                            }
                            arrData_n[r] = {
                                x: Date.UTC(chGMT(starttime_n[r][0]).slice(0, 4), chGMT(starttime_n[r][0]).slice(5, 7) - 1, chGMT(starttime_n[r][0]).slice(8, 10), chGMT(starttime_n[r][0]).slice(11, 13), chGMT(starttime_n[r][0]).slice(14, 16), chGMT(starttime_n[r][0]).slice(17, 19)),
                                x2: Date.UTC(chGMT(starttime_n[v][0]).slice(0, 4), chGMT(starttime_n[v][0]).slice(5, 7) - 1, chGMT(starttime_n[v][0]).slice(8, 10), chGMT(starttime_n[v][0]).slice(11, 13), chGMT(starttime_n[v][0]).slice(14, 16), chGMT(starttime_n[v][0]).slice(17, 19)),
                                y: in_array(symcategory_n[r], symresult),
                                sym: symcategory_n[r][0],
                                attribute: attribute_n[r],
                                color: '#b1a8ad'

                            }
                        }


                        $(function () {
                            function syncExtremes(e) {
                                var thisChart = this.chart;
                                if (e.trigger !== 'syncExtremes') {
                                    Highcharts.each(Highcharts.charts, function (chart) {
                                        if (chart !== thisChart) {
                                            if (chart.xAxis[0].setExtremes) {
                                                chart.xAxis[0].setExtremes(e.min, e.max, undefined, false, {trigger: 'syncExtremes'});
                                            }
                                        }
                                    });
                                }
                            }
                         
                            Highcharts.chart('timechart4', {

                                chart: {
                                    type: 'xrange',
                                    marginLeft: 150,
                                    zoomType: 'xy',
                                    panning: true,
                                    panKey: 'ctrl'


                                },
                                title: {
                                    text: 'EMR SYMPTOM-HADMID: ' + Term4 + ' EMRID: ' + data[0].EMR_ID
                                },
                                subtitle: {
                                    text: 'Drag to select the zoom area; Press ctrl to pan the chart left or right; Click on the legend to hide or resume display.'
                                },

                                xAxis: {
                                    type: 'datetime',
                                    events: {
                                        setExtremes: syncExtremes
                                    },
                                    title: {
                                        text: 'Time In Hospital'
                                    }


                                },

                                yAxis: [{
                                    title: {
                                        text: ''
                                    },
                                    categories: symresult,
                                    reversed: true,
                                    tickInterval: 1
                                }],


                                tooltip: {

                                    headerFormat: '<b>Record Time:</b>{point.x:%A,%b.%e,%Y,%H:%M:%S}<br>',
                                    pointFormat: '<b>Symptom Name:</b>{point.sym}<br><b>Attribute:</b>{point.attribute}<br>',
                                    positioner: function () {
                                        return {x: this.chart.chartWidth - this.label.width - 1, y: 0};
                                    },
                                   
                                    crosshairs: [{            
                                        width: 1,
                                        color: "#006cee",
                                        dashStyle: 'longdashdot'

                                    }, {
                                        width: 1,
                                        color: "#006cee",
                                        dashStyle: 'longdashdot'
                                    }]

                                },


                                legend: {
                                    layout: 'vertical',
                                    align: 'right',
                                    verticalAlign: 'middle',

                                },


                                series: [{
                                    name: 'Symptoms+',
                                    dashStyle: 'solid',
                                    pointWidth: 2,
                                    data: arrData_p,
                                    color:'#ffc1c1',
                                    dataLabels: {
                                        enabled: true,
                                        defer: false,
                                        inside: true,
                                        align: 'center'
                                    },


                                },
                                    {
                                        name: 'Symptoms-',
                                        dashStyle: 'solid',
                                        pointWidth: 2,
                                        data: arrData_n,
                                        color: '#b1a8ad',
                                        dataLabels: {
                                            enabled: true,
                                            defer: false,
                                            inside: true,
                                            align: 'center'
                                        }

                                    }]

                            });
                        });
                    }
                }
            })
        }



        Date.prototype.format = function (format) {
            var o = {
                "M+": this.getMonth() + 1, //month
                "d+": this.getDate(), //day
                "h+": this.getHours(), //hour
                "m+": this.getMinutes(), //minute
                "s+": this.getSeconds(), //second
                "q+": Math.floor((this.getMonth() + 3) / 3), //quarter
                "S": this.getMilliseconds() //millisecond
            }
            if (/(y+)/.test(format))
                format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
            for (var k in o)
                if (new RegExp("(" + k + ")").test(format))
                    format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
            return format;
        }

        function chGMT(gmtDate) {
           
            return gmtDate;
        }

        function in_array(searchString, array) {
            for (var i = 0; i < array.length; i++) {
                if (searchString == array[i][0]) return i;
            }
            return -1;
        }

        function isObjEqual(o1, o2) {
            var props1 = Object.getOwnPropertyNames(o1);
            var props2 = Object.getOwnPropertyNames(o2);
            if (props1.length != props2.length) {
                return false;
            }
            for (var i = 0, max = props1.length; i < max; i++) {
                var propName = props1[i];
                if (o1[propName] !== o2[propName]) {
                    return false;
                }
            }
            return true;
        }

        
        (function (H) {
            H.Legend.prototype.getAllItems = function () {
                var allItems = [];
                len = this.chart.series.length;
                H.each(this.chart.series, function (series) {
                    if (series == undefined) ; 
                    else {
                        var seriesOptions = series && series.options;
                        if (series.name === 'Symptoms+' || series.name === 'Symptoms-') {
                            series.color = series.userOptions.color
                        }
                        if (series && H.pick(
                            seriesOptions.showInLegend,
                            !H.defined(seriesOptions.linkedTo) ? undefined : false, true
                        )) {
                            allItems = allItems.concat(
                                series.legendItems ||
                                (
                                    seriesOptions.legendType === 'point' ?
                                        series.data :
                                        series
                                )
                            );
                        }
                    }

                });

                H.fireEvent(this, 'afterGetAllItems', {allItems: allItems});
                return allItems;
            }
        })(Highcharts)




        window.onload = function () {


            search_id();

        }



